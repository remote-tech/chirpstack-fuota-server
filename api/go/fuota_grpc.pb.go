// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: fuota.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FuotaServerServiceClient is the client API for FuotaServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FuotaServerServiceClient interface {
	// CreateDeployment creates the given FUOTA deployment.
	CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error)
	// GetDeploymentStatus returns the FUOTA deployment status given an ID.
	GetDeploymentStatus(ctx context.Context, in *GetDeploymentStatusRequest, opts ...grpc.CallOption) (*GetDeploymentStatusResponse, error)
	// GetDeploymentDeviceLogs returns the FUOTA logs given a deployment ID and
	// DevEUI.
	GetDeploymentDeviceLogs(ctx context.Context, in *GetDeploymentDeviceLogsRequest, opts ...grpc.CallOption) (*GetDeploymentDeviceLogsResponse, error)
	// DeleteDeployment deletes the given FUOTA deployment.
	DeleteDeployment(ctx context.Context, in *GetDeploymentStatusRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error)
}

type fuotaServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFuotaServerServiceClient(cc grpc.ClientConnInterface) FuotaServerServiceClient {
	return &fuotaServerServiceClient{cc}
}

func (c *fuotaServerServiceClient) CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error) {
	out := new(CreateDeploymentResponse)
	err := c.cc.Invoke(ctx, "/fuota.FuotaServerService/CreateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuotaServerServiceClient) GetDeploymentStatus(ctx context.Context, in *GetDeploymentStatusRequest, opts ...grpc.CallOption) (*GetDeploymentStatusResponse, error) {
	out := new(GetDeploymentStatusResponse)
	err := c.cc.Invoke(ctx, "/fuota.FuotaServerService/GetDeploymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuotaServerServiceClient) GetDeploymentDeviceLogs(ctx context.Context, in *GetDeploymentDeviceLogsRequest, opts ...grpc.CallOption) (*GetDeploymentDeviceLogsResponse, error) {
	out := new(GetDeploymentDeviceLogsResponse)
	err := c.cc.Invoke(ctx, "/fuota.FuotaServerService/GetDeploymentDeviceLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuotaServerServiceClient) DeleteDeployment(ctx context.Context, in *GetDeploymentStatusRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error) {
	out := new(CreateDeploymentResponse)
	err := c.cc.Invoke(ctx, "/fuota.FuotaServerService/DeleteDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FuotaServerServiceServer is the server API for FuotaServerService service.
// All implementations must embed UnimplementedFuotaServerServiceServer
// for forward compatibility
type FuotaServerServiceServer interface {
	// CreateDeployment creates the given FUOTA deployment.
	CreateDeployment(context.Context, *CreateDeploymentRequest) (*CreateDeploymentResponse, error)
	// GetDeploymentStatus returns the FUOTA deployment status given an ID.
	GetDeploymentStatus(context.Context, *GetDeploymentStatusRequest) (*GetDeploymentStatusResponse, error)
	// GetDeploymentDeviceLogs returns the FUOTA logs given a deployment ID and
	// DevEUI.
	GetDeploymentDeviceLogs(context.Context, *GetDeploymentDeviceLogsRequest) (*GetDeploymentDeviceLogsResponse, error)
	// DeleteDeployment deletes the given FUOTA deployment.
	DeleteDeployment(context.Context, *GetDeploymentStatusRequest) (*CreateDeploymentResponse, error)
	mustEmbedUnimplementedFuotaServerServiceServer()
}

// UnimplementedFuotaServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFuotaServerServiceServer struct {
}

func (UnimplementedFuotaServerServiceServer) CreateDeployment(context.Context, *CreateDeploymentRequest) (*CreateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedFuotaServerServiceServer) GetDeploymentStatus(context.Context, *GetDeploymentStatusRequest) (*GetDeploymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentStatus not implemented")
}
func (UnimplementedFuotaServerServiceServer) GetDeploymentDeviceLogs(context.Context, *GetDeploymentDeviceLogsRequest) (*GetDeploymentDeviceLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentDeviceLogs not implemented")
}
func (UnimplementedFuotaServerServiceServer) DeleteDeployment(context.Context, *GetDeploymentStatusRequest) (*CreateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployment not implemented")
}
func (UnimplementedFuotaServerServiceServer) mustEmbedUnimplementedFuotaServerServiceServer() {}

// UnsafeFuotaServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FuotaServerServiceServer will
// result in compilation errors.
type UnsafeFuotaServerServiceServer interface {
	mustEmbedUnimplementedFuotaServerServiceServer()
}

func RegisterFuotaServerServiceServer(s grpc.ServiceRegistrar, srv FuotaServerServiceServer) {
	s.RegisterService(&FuotaServerService_ServiceDesc, srv)
}

func _FuotaServerService_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuotaServerServiceServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fuota.FuotaServerService/CreateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuotaServerServiceServer).CreateDeployment(ctx, req.(*CreateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuotaServerService_GetDeploymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuotaServerServiceServer).GetDeploymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fuota.FuotaServerService/GetDeploymentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuotaServerServiceServer).GetDeploymentStatus(ctx, req.(*GetDeploymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuotaServerService_GetDeploymentDeviceLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentDeviceLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuotaServerServiceServer).GetDeploymentDeviceLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fuota.FuotaServerService/GetDeploymentDeviceLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuotaServerServiceServer).GetDeploymentDeviceLogs(ctx, req.(*GetDeploymentDeviceLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuotaServerService_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuotaServerServiceServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fuota.FuotaServerService/DeleteDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuotaServerServiceServer).DeleteDeployment(ctx, req.(*GetDeploymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FuotaServerService_ServiceDesc is the grpc.ServiceDesc for FuotaServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FuotaServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fuota.FuotaServerService",
	HandlerType: (*FuotaServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeployment",
			Handler:    _FuotaServerService_CreateDeployment_Handler,
		},
		{
			MethodName: "GetDeploymentStatus",
			Handler:    _FuotaServerService_GetDeploymentStatus_Handler,
		},
		{
			MethodName: "GetDeploymentDeviceLogs",
			Handler:    _FuotaServerService_GetDeploymentDeviceLogs_Handler,
		},
		{
			MethodName: "DeleteDeployment",
			Handler:    _FuotaServerService_DeleteDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fuota.proto",
}
