// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.9
// source: fuota.proto

package _go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Multicast region.
// Source:
// https://github.com/chirpstack/chirpstack/blob/master/api/proto/common/common.proto#L24.
type Region int32

const (
	// EU868
	Region_EU868 Region = 0
	// US915
	Region_US915 Region = 2
	// CN779
	Region_CN779 Region = 3
	// EU433
	Region_EU433 Region = 4
	// AU915
	Region_AU915 Region = 5
	// CN470
	Region_CN470 Region = 6
	// AS923
	Region_AS923 Region = 7
	// AS923 with -1.80 MHz frequency offset
	Region_AS923_2 Region = 12
	// AS923 with -6.60 MHz frequency offset
	Region_AS923_3 Region = 13
	// (AS923 with -5.90 MHz frequency offset).
	Region_AS923_4 Region = 14
	// KR920
	Region_KR920 Region = 8
	// IN865
	Region_IN865 Region = 9
	// RU864
	Region_RU864 Region = 10
	// ISM2400 (LoRaWAN 2.4 GHz)
	Region_ISM2400 Region = 11
)

// Enum value maps for Region.
var (
	Region_name = map[int32]string{
		0:  "EU868",
		2:  "US915",
		3:  "CN779",
		4:  "EU433",
		5:  "AU915",
		6:  "CN470",
		7:  "AS923",
		12: "AS923_2",
		13: "AS923_3",
		14: "AS923_4",
		8:  "KR920",
		9:  "IN865",
		10: "RU864",
		11: "ISM2400",
	}
	Region_value = map[string]int32{
		"EU868":   0,
		"US915":   2,
		"CN779":   3,
		"EU433":   4,
		"AU915":   5,
		"CN470":   6,
		"AS923":   7,
		"AS923_2": 12,
		"AS923_3": 13,
		"AS923_4": 14,
		"KR920":   8,
		"IN865":   9,
		"RU864":   10,
		"ISM2400": 11,
	}
)

func (x Region) Enum() *Region {
	p := new(Region)
	*p = x
	return p
}

func (x Region) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Region) Descriptor() protoreflect.EnumDescriptor {
	return file_fuota_proto_enumTypes[0].Descriptor()
}

func (Region) Type() protoreflect.EnumType {
	return &file_fuota_proto_enumTypes[0]
}

func (x Region) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Region.Descriptor instead.
func (Region) EnumDescriptor() ([]byte, []int) {
	return file_fuota_proto_rawDescGZIP(), []int{0}
}

type MulticastGroupType int32

const (
	// Class-B.
	MulticastGroupType_CLASS_B MulticastGroupType = 0
	// Class-C.
	MulticastGroupType_CLASS_C MulticastGroupType = 1
)

// Enum value maps for MulticastGroupType.
var (
	MulticastGroupType_name = map[int32]string{
		0: "CLASS_B",
		1: "CLASS_C",
	}
	MulticastGroupType_value = map[string]int32{
		"CLASS_B": 0,
		"CLASS_C": 1,
	}
)

func (x MulticastGroupType) Enum() *MulticastGroupType {
	p := new(MulticastGroupType)
	*p = x
	return p
}

func (x MulticastGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MulticastGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_fuota_proto_enumTypes[1].Descriptor()
}

func (MulticastGroupType) Type() protoreflect.EnumType {
	return &file_fuota_proto_enumTypes[1]
}

func (x MulticastGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MulticastGroupType.Descriptor instead.
func (MulticastGroupType) EnumDescriptor() ([]byte, []int) {
	return file_fuota_proto_rawDescGZIP(), []int{1}
}

type RequestFragmentationSessionStatus int32

const (
	// Enqueue the fragmentation-session status request command directly after
	// enqueueing the fragmentation-session fragments. This is the recommended
	// option for Class-A devices as the status request will stay in the
	// downlink queue until the device sends its next uplink.
	RequestFragmentationSessionStatus_AFTER_FRAGMENT_ENQUEUE RequestFragmentationSessionStatus = 0
	// Enqueue the fragmentation-session status request after the multicast
	// session-timeout. This is the recommended option for Class-B and -C
	// devices as selecting AFTER_FRAGMENT_ENQUEUE will likely cause the NS
	// to schedule the downlink frame during the FUOTA multicast-session.
	RequestFragmentationSessionStatus_AFTER_SESSION_TIMEOUT RequestFragmentationSessionStatus = 1
	// Do not request the fragmentation-session status.
	RequestFragmentationSessionStatus_NO_REQUEST RequestFragmentationSessionStatus = 2
)

// Enum value maps for RequestFragmentationSessionStatus.
var (
	RequestFragmentationSessionStatus_name = map[int32]string{
		0: "AFTER_FRAGMENT_ENQUEUE",
		1: "AFTER_SESSION_TIMEOUT",
		2: "NO_REQUEST",
	}
	RequestFragmentationSessionStatus_value = map[string]int32{
		"AFTER_FRAGMENT_ENQUEUE": 0,
		"AFTER_SESSION_TIMEOUT":  1,
		"NO_REQUEST":             2,
	}
)

func (x RequestFragmentationSessionStatus) Enum() *RequestFragmentationSessionStatus {
	p := new(RequestFragmentationSessionStatus)
	*p = x
	return p
}

func (x RequestFragmentationSessionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestFragmentationSessionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fuota_proto_enumTypes[2].Descriptor()
}

func (RequestFragmentationSessionStatus) Type() protoreflect.EnumType {
	return &file_fuota_proto_enumTypes[2]
}

func (x RequestFragmentationSessionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestFragmentationSessionStatus.Descriptor instead.
func (RequestFragmentationSessionStatus) EnumDescriptor() ([]byte, []int) {
	return file_fuota_proto_rawDescGZIP(), []int{2}
}

type DeploymentDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI.
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// McRootKey.
	McRootKey string `protobuf:"bytes,2,opt,name=mc_root_key,json=mcRootKey,proto3" json:"mc_root_key,omitempty"`
}

func (x *DeploymentDevice) Reset() {
	*x = DeploymentDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuota_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentDevice) ProtoMessage() {}

func (x *DeploymentDevice) ProtoReflect() protoreflect.Message {
	mi := &file_fuota_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentDevice.ProtoReflect.Descriptor instead.
func (*DeploymentDevice) Descriptor() ([]byte, []int) {
	return file_fuota_proto_rawDescGZIP(), []int{0}
}

func (x *DeploymentDevice) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

func (x *DeploymentDevice) GetMcRootKey() string {
	if x != nil {
		return x.McRootKey
	}
	return ""
}

type Deployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Application ID (UUID string).
	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	// Devices to include in this deployment.
	Devices []*DeploymentDevice `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"`
	// Multicast-group type.
	MulticastGroupType MulticastGroupType `protobuf:"varint,3,opt,name=multicast_group_type,json=multicastGroupType,proto3,enum=fuota.MulticastGroupType" json:"multicast_group_type,omitempty"`
	// Multicast data-rate.
	MulticastDr uint32 `protobuf:"varint,4,opt,name=multicast_dr,json=multicastDr,proto3" json:"multicast_dr,omitempty"`
	// Multicast ping-slot period (Class-B only).
	MulticastPingSlotPeriod uint32 `protobuf:"varint,5,opt,name=multicast_ping_slot_period,json=multicastPingSlotPeriod,proto3" json:"multicast_ping_slot_period,omitempty"`
	// Multicast frequency (Hz).
	MulticastFrequency uint32 `protobuf:"varint,6,opt,name=multicast_frequency,json=multicastFrequency,proto3" json:"multicast_frequency,omitempty"`
	// Multicast group ID.
	MulticastGroupId uint32 `protobuf:"varint,7,opt,name=multicast_group_id,json=multicastGroupId,proto3" json:"multicast_group_id,omitempty"`
	// Multicast timeout.
	// This defines the timeout of the multicast-session.
	// Please refer to the Remote Multicast Setup specification as this field
	// has a different meaning for Class-B and Class-C groups.
	MulticastTimeout uint32 `protobuf:"varint,8,opt,name=multicast_timeout,json=multicastTimeout,proto3" json:"multicast_timeout,omitempty"`
	// Multicast region.
	MulticastRegion Region `protobuf:"varint,19,opt,name=multicast_region,json=multicastRegion,proto3,enum=fuota.Region" json:"multicast_region,omitempty"`
	// Unicast timeout.
	// Set this to the value in which you at least expect an uplink frame from
	// the device. The FUOTA server will wait for the given time before
	// attempting a retry or continuing with the next step.
	UnicastTimeout *durationpb.Duration `protobuf:"bytes,9,opt,name=unicast_timeout,json=unicastTimeout,proto3" json:"unicast_timeout,omitempty"`
	// Unicast attempt count.
	// The number of attempts before considering an unicast command
	// to be failed.
	UnicastAttemptCount uint32 `protobuf:"varint,10,opt,name=unicast_attempt_count,json=unicastAttemptCount,proto3" json:"unicast_attempt_count,omitempty"`
	// FragmentationFragmentSize.
	// This defines the size of each payload fragment. Please refer to the
	// Regional Parameters specification for the maximum payload sizes
	// per data-rate and region.
	FragmentationFragmentSize uint32 `protobuf:"varint,11,opt,name=fragmentation_fragment_size,json=fragmentationFragmentSize,proto3" json:"fragmentation_fragment_size,omitempty"`
	// Payload.
	Payload []byte `protobuf:"bytes,12,opt,name=payload,proto3" json:"payload,omitempty"`
	// Fragmentation redundancy mode.
	// 0 = 50% XOR | 1 = LDPC
	FragmentationRedundancyMode uint32 `protobuf:"varint,20,opt,name=fragmentation_redundancy_mode,json=fragmentationRedundancyMode,proto3" json:"fragmentation_redundancy_mode,omitempty"`
	// Fragmentation redundancy.
	// The number represents the additional redundant frames to send.
	FragmentationRedundancy uint32 `protobuf:"varint,13,opt,name=fragmentation_redundancy,json=fragmentationRedundancy,proto3" json:"fragmentation_redundancy,omitempty"`
	// Fragmentation session index.
	FragmentationSessionIndex uint32 `protobuf:"varint,14,opt,name=fragmentation_session_index,json=fragmentationSessionIndex,proto3" json:"fragmentation_session_index,omitempty"`
	// Fragmentation matrix.
	FragmentationMatrix uint32 `protobuf:"varint,15,opt,name=fragmentation_matrix,json=fragmentationMatrix,proto3" json:"fragmentation_matrix,omitempty"`
	// Block ack delay.
	FragmentationBlockAckDelay uint32 `protobuf:"varint,16,opt,name=fragmentation_block_ack_delay,json=fragmentationBlockAckDelay,proto3" json:"fragmentation_block_ack_delay,omitempty"`
	// Descriptor (4 bytes).
	FragmentationDescriptor []byte `protobuf:"bytes,17,opt,name=fragmentation_descriptor,json=fragmentationDescriptor,proto3" json:"fragmentation_descriptor,omitempty"`
	// Request fragmentation session status.
	RequestFragmentationSessionStatus RequestFragmentationSessionStatus `protobuf:"varint,18,opt,name=request_fragmentation_session_status,json=requestFragmentationSessionStatus,proto3,enum=fuota.RequestFragmentationSessionStatus" json:"request_fragmentation_session_status,omitempty"`
}

func (x *Deployment) Reset() {
	*x = Deployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuota_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment) ProtoMessage() {}

func (x *Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_fuota_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment.ProtoReflect.Descriptor instead.
func (*Deployment) Descriptor() ([]byte, []int) {
	return file_fuota_proto_rawDescGZIP(), []int{1}
}

func (x *Deployment) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *Deployment) GetDevices() []*DeploymentDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Deployment) GetMulticastGroupType() MulticastGroupType {
	if x != nil {
		return x.MulticastGroupType
	}
	return MulticastGroupType_CLASS_B
}

func (x *Deployment) GetMulticastDr() uint32 {
	if x != nil {
		return x.MulticastDr
	}
	return 0
}

func (x *Deployment) GetMulticastPingSlotPeriod() uint32 {
	if x != nil {
		return x.MulticastPingSlotPeriod
	}
	return 0
}

func (x *Deployment) GetMulticastFrequency() uint32 {
	if x != nil {
		return x.MulticastFrequency
	}
	return 0
}

func (x *Deployment) GetMulticastGroupId() uint32 {
	if x != nil {
		return x.MulticastGroupId
	}
	return 0
}

func (x *Deployment) GetMulticastTimeout() uint32 {
	if x != nil {
		return x.MulticastTimeout
	}
	return 0
}

func (x *Deployment) GetMulticastRegion() Region {
	if x != nil {
		return x.MulticastRegion
	}
	return Region_EU868
}

func (x *Deployment) GetUnicastTimeout() *durationpb.Duration {
	if x != nil {
		return x.UnicastTimeout
	}
	return nil
}

func (x *Deployment) GetUnicastAttemptCount() uint32 {
	if x != nil {
		return x.UnicastAttemptCount
	}
	return 0
}

func (x *Deployment) GetFragmentationFragmentSize() uint32 {
	if x != nil {
		return x.FragmentationFragmentSize
	}
	return 0
}

func (x *Deployment) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Deployment) GetFragmentationRedundancyMode() uint32 {
	if x != nil {
		return x.FragmentationRedundancyMode
	}
	return 0
}

func (x *Deployment) GetFragmentationRedundancy() uint32 {
	if x != nil {
		return x.FragmentationRedundancy
	}
	return 0
}

func (x *Deployment) GetFragmentationSessionIndex() uint32 {
	if x != nil {
		return x.FragmentationSessionIndex
	}
	return 0
}

func (x *Deployment) GetFragmentationMatrix() uint32 {
	if x != nil {
		return x.FragmentationMatrix
	}
	return 0
}

func (x *Deployment) GetFragmentationBlockAckDelay() uint32 {
	if x != nil {
		return x.FragmentationBlockAckDelay
	}
	return 0
}

func (x *Deployment) GetFragmentationDescriptor() []byte {
	if x != nil {
		return x.FragmentationDescriptor
	}
	return nil
}

func (x *Deployment) GetRequestFragmentationSessionStatus() RequestFragmentationSessionStatus {
	if x != nil {
		return x.RequestFragmentationSessionStatus
	}
	return RequestFragmentationSessionStatus_AFTER_FRAGMENT_ENQUEUE
}

type CreateDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deployment.
	Deployment *Deployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *CreateDeploymentRequest) Reset() {
	*x = CreateDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuota_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeploymentRequest) ProtoMessage() {}

func (x *CreateDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuota_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeploymentRequest.ProtoReflect.Descriptor instead.
func (*CreateDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_fuota_proto_rawDescGZIP(), []int{2}
}

func (x *CreateDeploymentRequest) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type CreateDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the created deployment.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateDeploymentResponse) Reset() {
	*x = CreateDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuota_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeploymentResponse) ProtoMessage() {}

func (x *CreateDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fuota_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeploymentResponse.ProtoReflect.Descriptor instead.
func (*CreateDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_fuota_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDeploymentResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDeploymentStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deployment ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDeploymentStatusRequest) Reset() {
	*x = GetDeploymentStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuota_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentStatusRequest) ProtoMessage() {}

func (x *GetDeploymentStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuota_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentStatusRequest.ProtoReflect.Descriptor instead.
func (*GetDeploymentStatusRequest) Descriptor() ([]byte, []int) {
	return file_fuota_proto_rawDescGZIP(), []int{4}
}

func (x *GetDeploymentStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeploymentDeviceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI.
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Created at.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Updated at.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Multicast-group setup completed at.
	McGroupSetupCompletedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=mc_group_setup_completed_at,json=mcGroupSetupCompletedAt,proto3" json:"mc_group_setup_completed_at,omitempty"`
	// Multicast-session completed at.
	McSessionCompletedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=mc_session_completed_at,json=mcSessionCompletedAt,proto3" json:"mc_session_completed_at,omitempty"`
	// Fragmentation session setup completed at.
	FragSessionSetupCompletedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=frag_session_setup_completed_at,json=fragSessionSetupCompletedAt,proto3" json:"frag_session_setup_completed_at,omitempty"`
	// Fragmentation status completed at.
	FragStatusCompletedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=frag_status_completed_at,json=fragStatusCompletedAt,proto3" json:"frag_status_completed_at,omitempty"`
}

func (x *DeploymentDeviceStatus) Reset() {
	*x = DeploymentDeviceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuota_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentDeviceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentDeviceStatus) ProtoMessage() {}

func (x *DeploymentDeviceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fuota_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentDeviceStatus.ProtoReflect.Descriptor instead.
func (*DeploymentDeviceStatus) Descriptor() ([]byte, []int) {
	return file_fuota_proto_rawDescGZIP(), []int{5}
}

func (x *DeploymentDeviceStatus) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

func (x *DeploymentDeviceStatus) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DeploymentDeviceStatus) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DeploymentDeviceStatus) GetMcGroupSetupCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.McGroupSetupCompletedAt
	}
	return nil
}

func (x *DeploymentDeviceStatus) GetMcSessionCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.McSessionCompletedAt
	}
	return nil
}

func (x *DeploymentDeviceStatus) GetFragSessionSetupCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FragSessionSetupCompletedAt
	}
	return nil
}

func (x *DeploymentDeviceStatus) GetFragStatusCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FragStatusCompletedAt
	}
	return nil
}

type GetDeploymentStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Created at.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Updated at.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Multicast-group setup completed at.
	McGroupSetupCompletedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=mc_group_setup_completed_at,json=mcGroupSetupCompletedAt,proto3" json:"mc_group_setup_completed_at,omitempty"`
	// Multicast-session completed at.
	McSessionCompletedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=mc_session_completed_at,json=mcSessionCompletedAt,proto3" json:"mc_session_completed_at,omitempty"`
	// Fragmentation session setup completed at.
	FragSessionSetupCompletedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=frag_session_setup_completed_at,json=fragSessionSetupCompletedAt,proto3" json:"frag_session_setup_completed_at,omitempty"`
	// Enqueue completed at.
	EnqueueCompletedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=enqueue_completed_at,json=enqueueCompletedAt,proto3" json:"enqueue_completed_at,omitempty"`
	// Fragmentation status completed at.
	FragStatusCompletedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=frag_status_completed_at,json=fragStatusCompletedAt,proto3" json:"frag_status_completed_at,omitempty"`
	// Per device status.
	DeviceStatus []*DeploymentDeviceStatus `protobuf:"bytes,8,rep,name=device_status,json=deviceStatus,proto3" json:"device_status,omitempty"`
}

func (x *GetDeploymentStatusResponse) Reset() {
	*x = GetDeploymentStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuota_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentStatusResponse) ProtoMessage() {}

func (x *GetDeploymentStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fuota_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentStatusResponse.ProtoReflect.Descriptor instead.
func (*GetDeploymentStatusResponse) Descriptor() ([]byte, []int) {
	return file_fuota_proto_rawDescGZIP(), []int{6}
}

func (x *GetDeploymentStatusResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetDeploymentStatusResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GetDeploymentStatusResponse) GetMcGroupSetupCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.McGroupSetupCompletedAt
	}
	return nil
}

func (x *GetDeploymentStatusResponse) GetMcSessionCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.McSessionCompletedAt
	}
	return nil
}

func (x *GetDeploymentStatusResponse) GetFragSessionSetupCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FragSessionSetupCompletedAt
	}
	return nil
}

func (x *GetDeploymentStatusResponse) GetEnqueueCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EnqueueCompletedAt
	}
	return nil
}

func (x *GetDeploymentStatusResponse) GetFragStatusCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FragStatusCompletedAt
	}
	return nil
}

func (x *GetDeploymentStatusResponse) GetDeviceStatus() []*DeploymentDeviceStatus {
	if x != nil {
		return x.DeviceStatus
	}
	return nil
}

type GetDeploymentDeviceLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deployment ID.
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// DevEUI.
	DevEui string `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *GetDeploymentDeviceLogsRequest) Reset() {
	*x = GetDeploymentDeviceLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuota_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentDeviceLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentDeviceLogsRequest) ProtoMessage() {}

func (x *GetDeploymentDeviceLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuota_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentDeviceLogsRequest.ProtoReflect.Descriptor instead.
func (*GetDeploymentDeviceLogsRequest) Descriptor() ([]byte, []int) {
	return file_fuota_proto_rawDescGZIP(), []int{7}
}

func (x *GetDeploymentDeviceLogsRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *GetDeploymentDeviceLogsRequest) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

type DeploymentDeviceLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Created at.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// FPort.
	FPort uint32 `protobuf:"varint,2,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	// Command.
	Command string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	// Fields.
	Fields map[string]string `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeploymentDeviceLog) Reset() {
	*x = DeploymentDeviceLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuota_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentDeviceLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentDeviceLog) ProtoMessage() {}

func (x *DeploymentDeviceLog) ProtoReflect() protoreflect.Message {
	mi := &file_fuota_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentDeviceLog.ProtoReflect.Descriptor instead.
func (*DeploymentDeviceLog) Descriptor() ([]byte, []int) {
	return file_fuota_proto_rawDescGZIP(), []int{8}
}

func (x *DeploymentDeviceLog) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DeploymentDeviceLog) GetFPort() uint32 {
	if x != nil {
		return x.FPort
	}
	return 0
}

func (x *DeploymentDeviceLog) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *DeploymentDeviceLog) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type GetDeploymentDeviceLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*DeploymentDeviceLog `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *GetDeploymentDeviceLogsResponse) Reset() {
	*x = GetDeploymentDeviceLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuota_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentDeviceLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentDeviceLogsResponse) ProtoMessage() {}

func (x *GetDeploymentDeviceLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fuota_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentDeviceLogsResponse.ProtoReflect.Descriptor instead.
func (*GetDeploymentDeviceLogsResponse) Descriptor() ([]byte, []int) {
	return file_fuota_proto_rawDescGZIP(), []int{9}
}

func (x *GetDeploymentDeviceLogsResponse) GetLogs() []*DeploymentDeviceLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

var File_fuota_proto protoreflect.FileDescriptor

var file_fuota_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x66, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66,
	0x75, 0x6f, 0x74, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76,
	0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45,
	0x75, 0x69, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x63, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x63, 0x52, 0x6f, 0x6f, 0x74, 0x4b,
	0x65, 0x79, 0x22, 0x96, 0x09, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x75, 0x6f, 0x74,
	0x61, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x75, 0x6f, 0x74,
	0x61, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x44, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x6c,
	0x6f, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x66, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x42, 0x0a, 0x1d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x18, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x12,
	0x3e, 0x0a, 0x1b, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x31, 0x0a, 0x14, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x12, 0x41, 0x0a, 0x1d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x6b,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x18, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x12, 0x79, 0x0a, 0x24, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x66, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x21, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4c, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x75, 0x6f,
	0x74, 0x61, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x2a, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x8b, 0x04, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x58, 0x0a,
	0x1b, 0x6d, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17,
	0x6d, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x51, 0x0a, 0x17, 0x6d, 0x63, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6d, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x60, 0x0a, 0x1f, 0x66, 0x72,
	0x61, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x1b, 0x66, 0x72, 0x61, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x53, 0x0a, 0x18,
	0x66, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x66, 0x72, 0x61, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x89, 0x05, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x58, 0x0a, 0x1b, 0x6d, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x6d, 0x63, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x51, 0x0a, 0x17, 0x6d, 0x63, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14,
	0x6d, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x60, 0x0a, 0x1f, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1b, 0x66, 0x72, 0x61, 0x67, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4c, 0x0a, 0x14, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x12, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x53, 0x0a, 0x18, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x15, 0x66, 0x72, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x66, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5e, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x22, 0xfc, 0x01,
	0x0a, 0x13, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x3e, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x66, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x2a,
	0xaa, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x55,
	0x38, 0x36, 0x38, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x53, 0x39, 0x31, 0x35, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x43, 0x4e, 0x37, 0x37, 0x39, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x55, 0x34, 0x33, 0x33, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x39, 0x31, 0x35, 0x10,
	0x05, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4e, 0x34, 0x37, 0x30, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x53, 0x39, 0x32, 0x33, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x53, 0x39, 0x32, 0x33,
	0x5f, 0x32, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x53, 0x39, 0x32, 0x33, 0x5f, 0x33, 0x10,
	0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x53, 0x39, 0x32, 0x33, 0x5f, 0x34, 0x10, 0x0e, 0x12, 0x09,
	0x0a, 0x05, 0x4b, 0x52, 0x39, 0x32, 0x30, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x38,
	0x36, 0x35, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x55, 0x38, 0x36, 0x34, 0x10, 0x0a, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x53, 0x4d, 0x32, 0x34, 0x30, 0x30, 0x10, 0x0b, 0x2a, 0x2e, 0x0a, 0x12,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x42, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x10, 0x01, 0x2a, 0x6a, 0x0a, 0x21,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x32, 0x91, 0x03, 0x0a, 0x12, 0x46, 0x75, 0x6f,
	0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x55, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x66, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x66, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x2e,
	0x66, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x66, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x25, 0x2e, 0x66, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x66, 0x75, 0x6f, 0x74, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x66, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x66, 0x75, 0x6f, 0x74,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x63, 0x68, 0x69, 0x72, 0x70, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2d, 0x66, 0x75, 0x6f, 0x74, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76,
	0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fuota_proto_rawDescOnce sync.Once
	file_fuota_proto_rawDescData = file_fuota_proto_rawDesc
)

func file_fuota_proto_rawDescGZIP() []byte {
	file_fuota_proto_rawDescOnce.Do(func() {
		file_fuota_proto_rawDescData = protoimpl.X.CompressGZIP(file_fuota_proto_rawDescData)
	})
	return file_fuota_proto_rawDescData
}

var file_fuota_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_fuota_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_fuota_proto_goTypes = []interface{}{
	(Region)(0),                             // 0: fuota.Region
	(MulticastGroupType)(0),                 // 1: fuota.MulticastGroupType
	(RequestFragmentationSessionStatus)(0),  // 2: fuota.RequestFragmentationSessionStatus
	(*DeploymentDevice)(nil),                // 3: fuota.DeploymentDevice
	(*Deployment)(nil),                      // 4: fuota.Deployment
	(*CreateDeploymentRequest)(nil),         // 5: fuota.CreateDeploymentRequest
	(*CreateDeploymentResponse)(nil),        // 6: fuota.CreateDeploymentResponse
	(*GetDeploymentStatusRequest)(nil),      // 7: fuota.GetDeploymentStatusRequest
	(*DeploymentDeviceStatus)(nil),          // 8: fuota.DeploymentDeviceStatus
	(*GetDeploymentStatusResponse)(nil),     // 9: fuota.GetDeploymentStatusResponse
	(*GetDeploymentDeviceLogsRequest)(nil),  // 10: fuota.GetDeploymentDeviceLogsRequest
	(*DeploymentDeviceLog)(nil),             // 11: fuota.DeploymentDeviceLog
	(*GetDeploymentDeviceLogsResponse)(nil), // 12: fuota.GetDeploymentDeviceLogsResponse
	nil,                                     // 13: fuota.DeploymentDeviceLog.FieldsEntry
	(*durationpb.Duration)(nil),             // 14: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),           // 15: google.protobuf.Timestamp
}
var file_fuota_proto_depIdxs = []int32{
	3,  // 0: fuota.Deployment.devices:type_name -> fuota.DeploymentDevice
	1,  // 1: fuota.Deployment.multicast_group_type:type_name -> fuota.MulticastGroupType
	0,  // 2: fuota.Deployment.multicast_region:type_name -> fuota.Region
	14, // 3: fuota.Deployment.unicast_timeout:type_name -> google.protobuf.Duration
	2,  // 4: fuota.Deployment.request_fragmentation_session_status:type_name -> fuota.RequestFragmentationSessionStatus
	4,  // 5: fuota.CreateDeploymentRequest.deployment:type_name -> fuota.Deployment
	15, // 6: fuota.DeploymentDeviceStatus.created_at:type_name -> google.protobuf.Timestamp
	15, // 7: fuota.DeploymentDeviceStatus.updated_at:type_name -> google.protobuf.Timestamp
	15, // 8: fuota.DeploymentDeviceStatus.mc_group_setup_completed_at:type_name -> google.protobuf.Timestamp
	15, // 9: fuota.DeploymentDeviceStatus.mc_session_completed_at:type_name -> google.protobuf.Timestamp
	15, // 10: fuota.DeploymentDeviceStatus.frag_session_setup_completed_at:type_name -> google.protobuf.Timestamp
	15, // 11: fuota.DeploymentDeviceStatus.frag_status_completed_at:type_name -> google.protobuf.Timestamp
	15, // 12: fuota.GetDeploymentStatusResponse.created_at:type_name -> google.protobuf.Timestamp
	15, // 13: fuota.GetDeploymentStatusResponse.updated_at:type_name -> google.protobuf.Timestamp
	15, // 14: fuota.GetDeploymentStatusResponse.mc_group_setup_completed_at:type_name -> google.protobuf.Timestamp
	15, // 15: fuota.GetDeploymentStatusResponse.mc_session_completed_at:type_name -> google.protobuf.Timestamp
	15, // 16: fuota.GetDeploymentStatusResponse.frag_session_setup_completed_at:type_name -> google.protobuf.Timestamp
	15, // 17: fuota.GetDeploymentStatusResponse.enqueue_completed_at:type_name -> google.protobuf.Timestamp
	15, // 18: fuota.GetDeploymentStatusResponse.frag_status_completed_at:type_name -> google.protobuf.Timestamp
	8,  // 19: fuota.GetDeploymentStatusResponse.device_status:type_name -> fuota.DeploymentDeviceStatus
	15, // 20: fuota.DeploymentDeviceLog.created_at:type_name -> google.protobuf.Timestamp
	13, // 21: fuota.DeploymentDeviceLog.fields:type_name -> fuota.DeploymentDeviceLog.FieldsEntry
	11, // 22: fuota.GetDeploymentDeviceLogsResponse.logs:type_name -> fuota.DeploymentDeviceLog
	5,  // 23: fuota.FuotaServerService.CreateDeployment:input_type -> fuota.CreateDeploymentRequest
	7,  // 24: fuota.FuotaServerService.GetDeploymentStatus:input_type -> fuota.GetDeploymentStatusRequest
	10, // 25: fuota.FuotaServerService.GetDeploymentDeviceLogs:input_type -> fuota.GetDeploymentDeviceLogsRequest
	7,  // 26: fuota.FuotaServerService.DeleteDeployment:input_type -> fuota.GetDeploymentStatusRequest
	6,  // 27: fuota.FuotaServerService.CreateDeployment:output_type -> fuota.CreateDeploymentResponse
	9,  // 28: fuota.FuotaServerService.GetDeploymentStatus:output_type -> fuota.GetDeploymentStatusResponse
	12, // 29: fuota.FuotaServerService.GetDeploymentDeviceLogs:output_type -> fuota.GetDeploymentDeviceLogsResponse
	6,  // 30: fuota.FuotaServerService.DeleteDeployment:output_type -> fuota.CreateDeploymentResponse
	27, // [27:31] is the sub-list for method output_type
	23, // [23:27] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_fuota_proto_init() }
func file_fuota_proto_init() {
	if File_fuota_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fuota_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuota_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuota_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuota_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuota_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuota_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentDeviceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuota_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuota_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentDeviceLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuota_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentDeviceLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuota_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentDeviceLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fuota_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fuota_proto_goTypes,
		DependencyIndexes: file_fuota_proto_depIdxs,
		EnumInfos:         file_fuota_proto_enumTypes,
		MessageInfos:      file_fuota_proto_msgTypes,
	}.Build()
	File_fuota_proto = out.File
	file_fuota_proto_rawDesc = nil
	file_fuota_proto_goTypes = nil
	file_fuota_proto_depIdxs = nil
}
